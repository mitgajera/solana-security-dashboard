"use client"

import { useState, useEffect } from "react"
import { supabase, mockPendingExploits, fetchWithFallback } from "@/lib/supabase"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from "@/components/ui/card"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ExploitDetailsDialog } from "@/components/admin/exploit-details-dialog"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  AlertTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  EyeIcon,
  MoreHorizontalIcon,
  Search,
  FilterIcon,
  AlertCircleIcon,
} from "lucide-react"

interface PendingExploitsTableProps {
  dataSource: "live" | "mock";
}

export function PendingExploitsTable({ dataSource }: PendingExploitsTableProps) {
  const [pendingExploits, setPendingExploits] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedExploit, setSelectedExploit] = useState<any | null>(null)
  const [detailsOpen, setDetailsOpen] = useState(false)

  useEffect(() => {
    const fetchPendingExploits = async () => {
      setLoading(true);
      try {
        if (dataSource === "live") {
          const { data, error } = await supabase
            .from('hack_reports')
            .select('*')
            .eq('status', 'pending')
            .order('created_at', { ascending: false });

          if (error) throw error;

          setPendingExploits(data || []);
        } else {
          setPendingExploits(mockPendingExploits);
        }
      } catch (err) {
        console.error("Error fetching pending exploits:", err);
        setError("Failed to load pending exploits");
        setPendingExploits(mockPendingExploits);
      } finally {
        setLoading(false);
      }
    };

    fetchPendingExploits();

    if (dataSource === "live") {
      const subscription = supabase
        .channel('pending-exploits-changes')
        .on('postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'hack_reports',
            filter: 'status=eq.pending'
          },
          (payload) => {
            fetchPendingExploits();
          }
        )
        .subscribe();

      return () => {
        supabase.removeChannel(subscription);
      };
    }
  }, [dataSource]);

  const filteredExploits = pendingExploits.filter((exploit: any) =>
    exploit.project.toLowerCase().includes(searchTerm.toLowerCase()) ||
    exploit.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
    exploit.submittedBy.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const handleStatusChange = (id: string, newStatus: string) => {
    console.log(`Changing status of exploit ${id} to ${newStatus}`);
  }

  const handleViewDetails = (exploit: any) => {
    setSelectedExploit(exploit)
    setDetailsOpen(true)
  }

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high':
        return <AlertCircleIcon className="h-4 w-4 text-red-500" />
      case 'medium':
        return <AlertTriangleIcon className="h-4 w-4 text-amber-500" />
      default:
        return <AlertTriangleIcon className="h-4 w-4 text-blue-500" />
    }
  }

  return (
    <>
      <Card>
        <CardHeader>
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <CardTitle>Pending Exploit Submissions</CardTitle>
              <CardDescription>
                {loading ? "Loading submissions..." :
                  error ? error :
                  `Review and process ${pendingExploits.length} pending exploit submissions`}
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search..."
                  className="pl-8 w-[200px] sm:w-[260px]"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  suppressHydrationWarning
                />
              </div>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="icon">
                    <FilterIcon className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem>
                    All Submissions
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    High Priority Only
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    Pending Review
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    Under Review
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex justify-center p-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
          ) : error ? (
            <div className="text-center p-8 text-destructive">
              {error}
            </div>
          ) : (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Status</TableHead>
                    <TableHead>Project</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Submitted By</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Est. Loss</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredExploits.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-6 text-muted-foreground">
                        No pending submissions found
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredExploits.map((exploit: any) => (
                      <TableRow key={exploit.id} className="group">
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {getPriorityIcon(exploit.priority)}
                            <Badge variant={
                              exploit.status === "pending"
                                ? "outline"
                                : exploit.status === "under review"
                                  ? "secondary"
                                  : "default"
                            }>
                              {exploit.status === "pending" ? "Pending" :
                                exploit.status === "under review" ? "Under Review" :
                                exploit.status}
                            </Badge>
                          </div>
                        </TableCell>
                        <TableCell className="font-medium">{exploit.project}</TableCell>
                        <TableCell>{exploit.type}</TableCell>
                        <TableCell>{exploit.submittedBy}</TableCell>
                        <TableCell>{new Date(exploit.submittedDate).toLocaleDateString()}</TableCell>
                        <TableCell>{exploit.estimatedLoss}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleViewDetails(exploit)}
                            >
                              <EyeIcon className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleStatusChange(exploit.id, "approved")}
                            >
                              <CheckCircleIcon className="h-4 w-4 text-green-500" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleStatusChange(exploit.id, "rejected")}
                            >
                              <XCircleIcon className="h-4 w-4 text-red-500" />
                            </Button>
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="icon">
                                  <MoreHorizontalIcon className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={() => handleStatusChange(exploit.id, "under review")}>
                                  Mark as Under Review
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => console.log("Assign to me")}>
                                  Assign to Me
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => console.log("Request more info")}>
                                  Request More Info
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex justify-between">
          <p className="text-sm text-muted-foreground">
            Showing {filteredExploits.length} of {pendingExploits.length} pending submissions
          </p>
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              size="sm"
              suppressHydrationWarning
            >
              Previous
            </Button>
            <Button variant="outline" size="sm">Next</Button>
          </div>
        </CardFooter>
      </Card>

      {selectedExploit && (
        <ExploitDetailsDialog
          exploit={selectedExploit}
          open={detailsOpen}
          onOpenChange={setDetailsOpen}
        />
      )}
    </>
  )
}
