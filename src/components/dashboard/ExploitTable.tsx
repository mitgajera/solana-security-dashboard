import React, { useState } from 'react';
import { useExploitData } from '../../hooks/useExploitData';

const ExploitTable = () => {
  const { exploits, loading, error } = useExploitData();
  const [sortField, setSortField] = useState('date');
  const [sortDirection, setSortDirection] = useState('desc');
  
  if (loading) return <div className="p-4 text-center">Loading exploit data...</div>;
  if (error) return <div className="p-4 text-center text-red-500">{error}</div>;
  
  const sortedExploits = [...exploits].sort((a, b) => {
    if (sortField === 'date') {
      return sortDirection === 'asc' 
        ? new Date(a.date).getTime() - new Date(b.date).getTime()
        : new Date(b.date).getTime() - new Date(a.date).getTime();
    }
    
    if (sortField === 'fundsLost') {
      return sortDirection === 'asc'
        ? a.fundsLost - b.fundsLost
        : b.fundsLost - a.fundsLost;
    }
    
    return 0;
  });
  
  // Define types
  interface Exploit {
    id: string | number;
    protocol: string;
    date: string;
    type: string;
    fundsLost: number;
    responseTime: number | string;
  }
  
  type SortField = 'date' | 'fundsLost';
  type SortDirection = 'asc' | 'desc';
  
  const handleSort = (field: SortField): void => {
    if (field === sortField) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };
  
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
        <thead className="bg-gray-50 dark:bg-gray-700">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Protocol
            </th>
            <th 
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
              onClick={() => handleSort('date')}
            >
              Date {sortField === 'date' && (sortDirection === 'asc' ? '↑' : '↓')}
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Type
            </th>
            <th 
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer"
              onClick={() => handleSort('fundsLost')}
            >
              Funds Lost {sortField === 'fundsLost' && (sortDirection === 'asc' ? '↑' : '↓')}
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Response Time (hrs)
            </th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200 dark:divide-gray-600">
          {sortedExploits.map((exploit) => (
            <tr key={exploit.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                {exploit.protocol}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                {new Date(exploit.date).toLocaleDateString()}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                {exploit.type}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-red-500">
                ${exploit.fundsLost.toLocaleString()}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                {exploit.responseTime}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ExploitTable;