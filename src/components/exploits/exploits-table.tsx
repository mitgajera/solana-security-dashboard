"use client"

import { useState } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  ChevronDownIcon,
  SearchIcon,
  FilterIcon,
  ExternalLinkIcon,
  ClipboardCopyIcon,
  EyeIcon,
  InfoIcon
} from "lucide-react"

// This would normally be fetched from an API
const exploitData = [
  {
    id: "01",
    project: "SolWallet Protocol",
    type: "Flash Loan Attack",
    date: "April 2, 2024",
    funds: "$12.5M",
    status: "Resolved",
    description: "An attacker exploited a vulnerability in the lending logic to execute a flash loan attack, draining user funds.",
    txid: "5xMPvKV5p3JRq19CAiDT8yGAD93cZ8AEjYWnP3yx8wVY",
  },
  {
    id: "02",
    project: "SolarFinance",
    type: "Reentrancy",
    date: "March 15, 2024",
    funds: "$8.3M",
    status: "Investigating",
    description: "Multiple funds were drained due to a reentrancy vulnerability in the deposit function.",
    txid: "3P7tLdYLFvbCKGzZgAM3yDvfpYDKdXsLpCqGfmNLSFno",
  },
  {
    id: "03",
    project: "SolStake",
    type: "Access Control",
    date: "March 5, 2024",
    funds: "$4.6M",
    status: "Resolved",
    description: "An improperly secured admin function allowed an attacker to withdraw user funds.",
    txid: "FGscGqSDUVzwWmQpMwM6Nv6S9V2RsqgxdkyfSJKGnG5o",
  },
  {
    id: "04",
    project: "SolSwap DEX",
    type: "Price Manipulation",
    date: "February 20, 2024",
    funds: "$18.2M",
    status: "Resolved",
    description: "Attackers manipulated price oracle data to execute trades at favorable prices.",
    txid: "GKot5hcbGbmCNtg6zbSY6Qj3FGxiMb3aRFdFQEfVJx7o",
  },
  {
    id: "05",
    project: "Luna Bridge",
    type: "Oracle Manipulation",
    date: "February 10, 2024",
    funds: "$7.1M",
    status: "Partial Recovery",
    description: "Exploiter manipulated the price feed to extract funds during a cross-chain transfer.",
    txid: "2SkvFqS6R2REkXT7qYSTgMbxdVjLqNrVp2outrFeU3au",
  },
  {
    id: "06",
    project: "SolanaJump",
    type: "Smart Contract Vulnerability",
    date: "January 28, 2024",
    funds: "$3.8M",
    status: "Resolved",
    description: "An integer overflow vulnerability allowed an attacker to mint tokens and drain liquidity.",
    txid: "67JMPRwXHbKuxwBE3RVnGdBfqwQFXRYK1LiSKP9qRUPb",
  },
  {
    id: "07",
    project: "SolanaTerra",
    type: "Flash Loan Attack",
    date: "January 15, 2024",
    funds: "$5.2M",
    status: "Investigating",
    description: "Multiple flash loans were used to manipulate pool prices and extract value.",
    txid: "8tYsAeET1JqkPrY5eQvAQ8vHDBLKJPKivEpVKYDcj18Q",
  },
  {
    id: "08",
    project: "MoonSol Network",
    type: "Private Key Compromise",
    date: "January 5, 2024",
    funds: "$1.3M",
    status: "Unresolved",
    description: "A private key for a multisig wallet was compromised, leading to unauthorized withdrawals.",
    txid: "7EMj85YKNuqYkHRYMt9G7KZxGm3xjZX6PxGFNh77Xvfw",
  },
  {
    id: "09",
    project: "SolRaiders",
    type: "Logic Error",
    date: "December 20, 2023",
    funds: "$0.9M",
    status: "Resolved",
    description: "A flaw in the reward calculation allowed users to claim excessive rewards.",
    txid: "4sFJEfcWX8xdAwpo6TG2VwBYixYRdVwJXL1zqpTbDBoZ",
  },
  {
    id: "10",
    project: "SolWhale",
    type: "Governance Attack",
    date: "December 10, 2023",
    funds: "$4.1M",
    status: "Resolved",
    description: "An attacker gathered enough governance tokens to pass a malicious proposal.",
    txid: "2WjCGgKU9V9rYKZoZg3WH9YbKaUVXerQWLZ8yqvJ5kW1",
  },
]

export function ExploitsTable() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filterType, setFilterType] = useState<string | null>(null)
  const [filterStatus, setFilterStatus] = useState<string | null>(null)
  const [sortBy, setSortBy] = useState<{
    column: 'project' | 'type' | 'date' | 'funds' | 'status';
    direction: 'asc' | 'desc';
  }>({
    column: 'date',
    direction: 'desc',
  })

  // Get unique types and statuses for filters
  const typeOptions = Array.from(new Set(exploitData.map(item => item.type)))
  const statusOptions = Array.from(new Set(exploitData.map(item => item.status)))

  // Filter and sort the data
  const filteredData = exploitData.filter(item => {
    // Search term filter
    const searchTermMatch = searchTerm === "" ||
      item.project.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.description.toLowerCase().includes(searchTerm.toLowerCase())

    // Type filter
    const typeMatch = filterType === null || item.type === filterType

    // Status filter
    const statusMatch = filterStatus === null || item.status === filterStatus

    return searchTermMatch && typeMatch && statusMatch
  }).sort((a, b) => {
    if (sortBy.column === 'funds') {
      // Parse dollar amounts
      const amountA = Number.parseFloat(a.funds.replace(/[^0-9.]/g, ''))
      const amountB = Number.parseFloat(b.funds.replace(/[^0-9.]/g, ''))
      return sortBy.direction === 'asc' ? amountA - amountB : amountB - amountA
    }

    // String comparison for other columns
    const valueA = a[sortBy.column]
    const valueB = b[sortBy.column]
    return sortBy.direction === 'asc'
      ? valueA.localeCompare(valueB)
      : valueB.localeCompare(valueA)
  })

  const toggleSort = (column: 'project' | 'type' | 'date' | 'funds' | 'status') => {
    if (sortBy.column === column) {
      // Toggle direction
      setSortBy({
        column,
        direction: sortBy.direction === 'asc' ? 'desc' : 'asc'
      })
    } else {
      // New column, default to desc
      setSortBy({
        column,
        direction: 'desc'
      })
    }
  }

  return (
    <Card>
      <div className="flex flex-col md:flex-row items-center p-4 gap-4">
        <div className="relative flex-1 min-w-0">
          <SearchIcon className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="Search projects, vulnerabilities, or descriptions..."
            className="pl-10"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="flex gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex gap-2 items-center">
                <FilterIcon className="h-4 w-4" />
                <span>Type</span>
                <ChevronDownIcon className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => setFilterType(null)}>
                All Types
              </DropdownMenuItem>
              {typeOptions.map((type) => (
                <DropdownMenuItem key={type} onClick={() => setFilterType(type)}>
                  {type}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex gap-2 items-center">
                <FilterIcon className="h-4 w-4" />
                <span>Status</span>
                <ChevronDownIcon className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => setFilterStatus(null)}>
                All Statuses
              </DropdownMenuItem>
              {statusOptions.map((status) => (
                <DropdownMenuItem key={status} onClick={() => setFilterStatus(status)}>
                  {status}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[180px]">
                <button
                  className="flex items-center gap-1 hover:text-primary"
                  onClick={() => toggleSort('project')}
                >
                  Project
                  {sortBy.column === 'project' && (
                    <ChevronDownIcon
                      className={`h-4 w-4 ${sortBy.direction === 'asc' ? 'rotate-180 transform' : ''}`}
                    />
                  )}
                </button>
              </TableHead>
              <TableHead>
                <button
                  className="flex items-center gap-1 hover:text-primary"
                  onClick={() => toggleSort('type')}
                >
                  Vulnerability Type
                  {sortBy.column === 'type' && (
                    <ChevronDownIcon
                      className={`h-4 w-4 ${sortBy.direction === 'asc' ? 'rotate-180 transform' : ''}`}
                    />
                  )}
                </button>
              </TableHead>
              <TableHead>
                <button
                  className="flex items-center gap-1 hover:text-primary"
                  onClick={() => toggleSort('date')}
                >
                  Date
                  {sortBy.column === 'date' && (
                    <ChevronDownIcon
                      className={`h-4 w-4 ${sortBy.direction === 'asc' ? 'rotate-180 transform' : ''}`}
                    />
                  )}
                </button>
              </TableHead>
              <TableHead>
                <button
                  className="flex items-center gap-1 hover:text-primary"
                  onClick={() => toggleSort('funds')}
                >
                  Funds Lost
                  {sortBy.column === 'funds' && (
                    <ChevronDownIcon
                      className={`h-4 w-4 ${sortBy.direction === 'asc' ? 'rotate-180 transform' : ''}`}
                    />
                  )}
                </button>
              </TableHead>
              <TableHead>
                <button
                  className="flex items-center gap-1 hover:text-primary"
                  onClick={() => toggleSort('status')}
                >
                  Status
                  {sortBy.column === 'status' && (
                    <ChevronDownIcon
                      className={`h-4 w-4 ${sortBy.direction === 'asc' ? 'rotate-180 transform' : ''}`}
                    />
                  )}
                </button>
              </TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredData.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} className="text-center py-6 text-muted-foreground">
                  No exploits found matching your criteria.
                </TableCell>
              </TableRow>
            ) : (
              filteredData.map((exploit) => (
                <TableRow key={exploit.id}>
                  <TableCell className="font-medium">{exploit.project}</TableCell>
                  <TableCell>{exploit.type}</TableCell>
                  <TableCell>{exploit.date}</TableCell>
                  <TableCell>{exploit.funds}</TableCell>
                  <TableCell>
                    <Badge
                      variant={
                        exploit.status === "Resolved"
                          ? "outline"
                          : exploit.status === "Investigating"
                            ? "destructive"
                            : exploit.status === "Partial Recovery"
                              ? "secondary"
                              : "default"
                      }
                    >
                      {exploit.status}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="ghost"
                        size="icon"
                        title="View Details"
                      >
                        <EyeIcon className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        title="Copy Transaction ID"
                        onClick={() => {
                          navigator.clipboard.writeText(exploit.txid)
                        }}
                      >
                        <ClipboardCopyIcon className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        title="View on Explorer"
                        onClick={() => {
                          window.open(`https://explorer.solana.com/tx/${exploit.txid}`, '_blank')
                        }}
                      >
                        <ExternalLinkIcon className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      <div className="p-4 text-sm text-muted-foreground flex items-center gap-2">
        <InfoIcon className="h-4 w-4" />
        <span>Showing {filteredData.length} of {exploitData.length} exploits</span>
      </div>
    </Card>
  )
}
