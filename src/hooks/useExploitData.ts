import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { Exploit } from '../types';
import { solanaService } from '../services/solanaService';

// Define the Supabase database row type
interface ExploitRow {
  id: number;
  protocol: string;
  date: string;
  type: string;
  funds_lost: number;
  response_time: number;
  description?: string;
  created_at: string;
}

export function useExploitData() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchExploits() {
      try {
        setLoading(true);
        
        // Try to get data from Solana service first
        try {
          const realExploits = await solanaService.fetchHistoricalExploits();
          if (realExploits && realExploits.length > 0) {
            setExploits(realExploits);
            setLoading(false);
            return;
          }
        } catch (err) {
          console.warn('Failed to fetch real exploit data, falling back to database', err);
        }
        
        // Fallback to database
        const result = await supabase
          .from('exploits')
          .select('*')
          .order('date', { ascending: false })
          .limit(999);
          
        const { data, error } = result;
        if (error) throw error;
        
        // Transform the data to match our interface
        const formattedData = data?.map((item: ExploitRow) => ({
          id: item.id,
          protocol: item.protocol,
          date: item.date,
          type: item.type,
          fundsLost: Number(item.funds_lost || 0),
          responseTime: item.response_time || 0
        })) || [];
        
        setExploits(formattedData);
      } catch (err) {
        console.error('Error fetching exploit data:', err);
        setError('Failed to load exploit data');
      } finally {
        setLoading(false);
      }
    }
    
    fetchExploits();
  }, []);
  
  return { exploits, loading, error };
}